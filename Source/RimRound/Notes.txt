

					graphicPaths = alienProps.alienRace.graphicPaths.GetCurrentGraphicPath(alien.ageTracker.CurLifeStage);

					CachedData.headGraphicPath(alien.story) = alienComp.crownType.NullOrEmpty() ? 
																apg.RandomAlienHead(graphicPaths.head, alien) : 
                                                                AlienPartGenerator.GetAlienHead(graphicPaths.head, apg.useGenderedHeads ? alien.gender.ToString() : "", alienComp.crownType);




	                __instance.headGraphic = alien.health.hediffSet.HasHead && !alien.story.HeadGraphicPath.NullOrEmpty() ?
                                             GraphicDatabase.Get<Graphic_Multi>(alien.story.HeadGraphicPath,
                                                 ContentFinder<Texture2D>.Get(alien.story.HeadGraphicPath + "_northm", reportFailure: false) == null ?
                                                             graphicPaths.skinShader?.Shader ?? ShaderDatabase.Cutout :
                                                             ShaderDatabase.CutoutComplex, Vector2.one, alien.story.SkinColor,
                                                 apg.SkinColor(alien, first: false)) :
                                             null;






				AlienPartGenerator.AlienComp alienComp = __0.GetComp<AlienPartGenerator.AlienComp>();
				//alienComp.crownType = "";

				Log.Message("Im a string");

				//string eggy = CachedData.headGraphicPath.Invoke(__0.story);
				//Log.Message($"My head path was: {eggy}");
				if (alienComp.crownType == "Average_Innocent")
				{
					alienComp.crownType = "Average_Guilty";
				}
				else 
				{
					alienComp.crownType = "Average_Innocent";
				}


				//Allows for the pawn to be rerendered after the body change	
				Values.RedrawPawn(__0);


				            //float value = 0;
            //AlienPartGenerator.AlienComp alienComp = pawn.GetComp<AlienPartGenerator.AlienComp>();





//Transpiler format
		public static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions, ILGenerator generator) 
		{
			List<CodeInstruction> codeInstructions = new List<CodeInstruction>(instructions);
			List<CodeInstruction> newInstructions = new List<CodeInstruction>();
			
			int startJndex = -1;
			int endJndex = -1;



			if (startJndex != -1 && endJndex != -1)
			{
				codeInstructions.InsertRange(startJndex, newInstructions);
			}

			return codeInstructions;
		}